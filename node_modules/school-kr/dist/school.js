"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _core = _interopRequireDefault(require("./src/core"));

var _util = _interopRequireDefault(require("./src/util"));

var _data = _interopRequireDefault(require("./src/data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var type = _data["default"].type,
    region = _data["default"].region,
    data = _data["default"].data;

var School =
/*#__PURE__*/
function () {
  /**
   * @constructor
   */
  function School() {
    _classCallCheck(this, School);

    this._requestManager = new _core["default"].RequestManager(); // HTTP 요청 관리 객체

    this._data = data; // 데이터 정의 객체

    this._searchUrl = data.searchUrl; // 검색 URL End-point

    this._mealUrl = data.mealUrl; // 급식 URL End-point

    this._calendarUrl = data.calendarUrl; // 학사일정 URL End-point

    this._schoolType = null; // init한 교육기관 유형 심볼 값

    this._schoolRegion = null; // init한 지역별 교육청 주소 심볼 값

    this._schoolCode = null; // init한 학교 코드 값

    this._init = false; // 학교 초기화 여부
  }
  /**
   * 데이터 조회 전에 준비 상태를 확인합니다.
   */


  _createClass(School, [{
    key: "_prepare",
    value: function _prepare() {
      if (!this._init) {
        throw new Error('학교 정보가 설정되지 않았습니다.');
      }
    }
    /**
     * 해당 학교로 인스턴스를 초기화 합니다.
     * @param {Symbol} type 교육기관 심볼
     * @param {Symbol} region 교육청 관할 지역 심볼
     * @param {string} schoolCode 학교명
     */

  }, {
    key: "init",
    value: function init(type, region, schoolCode) {
      if (!(this._data.EDUTYPE[type] && this._data.REGION[region])) {
        throw new Error('교육기관 유형 또는 지역 값을 확인해주세요');
      }

      if (!(schoolCode && typeof schoolCode === 'string')) {
        throw new Error('학교 코드 값을 확인해주세요');
      }

      this._schoolType = type;
      this._schoolRegion = region;
      this._schoolCode = schoolCode;
      this._init = true;

      this._requestManager.setRegion(region);
    }
    /**
     * 해당 지역의 학교를 검색합니다.
     * @param {Symbol} region 교육청 관할 지역 심볼
     * @param {string} name 학교명
     */

  }, {
    key: "search",
    value: function search(region, name) {
      if (!this._data.REGION[region]) {
        throw new Error('지역 값을 확인해주세요');
      }

      if (!(name && typeof name === 'string')) {
        throw new Error('검색할 학교명을 확인해주세요');
      }

      this._requestManager.setRegion(region);

      return this._requestManager.post(this._searchUrl, {
        kraOrgNm: name
      }).then(function (_ref) {
        var data = _ref.data;

        if (data.result.status === 'error') {
          throw new Error(data.result.message);
        }

        return data.resultSVO.orgDVOList.map(function (s) {
          return {
            name: s.kraOrgNm,
            schoolCode: s.orgCode,
            address: s.zipAdres
          };
        });
      });
    }
    /**
     * 지정한 년-월의 급식 데이터를 가져옵니다.
     * 년-월을 지정하지 않으면 현재 시점의 날짜를 기준으로 조회합니다.
     * @param {any} [year] 년도(Year) 혹은 설정 객체
     * @param {number} [month] 월(Month)
     */

  }, {
    key: "getMeal",
    value: function getMeal(year, month) {
      this._prepare();

      var option = {};
      var currentDate = new Date();

      if (_typeof(year) === 'object') {
        option = year;
        year = option.year || currentDate.getFullYear();
        month = option.month || currentDate.getMonth() + 1;
      } else if (typeof year === 'undefined' || typeof month === 'undefined') {
        year = currentDate.getFullYear();
        month = currentDate.getMonth() + 1;
      }

      if (year <= 0) {
        throw new Error('년도(year) 값을 확인해주세요');
      }

      if (month !== 0 && month < 1 || month > 12) {
        throw new Error('월(month)은 1~12 범위로 지정해주세요');
      }

      var schulCrseScCode = this._data.EDUTYPE[this._schoolType].toString();

      var schulKndScCode = '0' + schulCrseScCode;
      return this._requestManager.post(this._mealUrl, {
        ay: _util["default"].paddingNumber(year),
        mm: _util["default"].paddingNumber(month, 2),
        schulCode: this._schoolCode,
        schulKndScCode: schulKndScCode,
        schulCrseScCode: schulCrseScCode
      }).then(function (_ref2) {
        var data = _ref2.data;

        if (data.result.status === 'error') {
          throw new Error(data.result.message);
        }

        function parseMeal(d) {
          if (d) {
            var match = d.match(/^[0-9]{1,2}/);

            if (match) {
              var date = match[0];
              var menu = d.slice(date.length);
              return {
                date: date,
                menu: menu ? menu.replace(/\s/g, '').replace(/<br\/>/g, '\n').slice(1) : ''
              };
            } else {
              return null;
            }
          } else {
            return null;
          }
        }

        var mealData = [];
        data.resultSVO.mthDietList.forEach(function (meal) {
          mealData.push(parseMeal(meal.sun));
          mealData.push(parseMeal(meal.mon));
          mealData.push(parseMeal(meal.tue));
          mealData.push(parseMeal(meal.wed));
          mealData.push(parseMeal(meal.the));
          mealData.push(parseMeal(meal.fri));
          mealData.push(parseMeal(meal.sat));
        });
        var res = {};
        mealData.forEach(function (meal) {
          if (meal && meal.date) {
            res[meal.date] = meal.menu || option["default"] || '';
          }
        });
        res.year = year;
        res.month = month;
        res.day = currentDate.getMonth() + 1 === month ? currentDate.getDate() : 0;
        res.today = year === currentDate.getFullYear() && month === currentDate.getMonth() + 1 ? res[res.day] || '' : '';
        return res;
      });
    }
    /**
     * 지정한 년-월의 학사일정 데이터를 가져옵니다.
     * 년-월을 지정하지 않으면 현재 시점의 날짜를 기준으로 조회합니다.
     * @param {any} [year] 년도(Year) 혹은 설정 객체
     * @param {number} [month] 월(Month)
     */

  }, {
    key: "getCalendar",
    value: function getCalendar(year, month) {
      this._prepare();

      var option = {};
      var currentDate = new Date(); // 설정값 확인

      if (_typeof(year) === 'object') {
        // year에 옵션 객체를 전달한 경우
        option = year;
        year = option.year || currentDate.getFullYear();
        month = option.month || currentDate.getMonth() + 1;
      } else if (typeof year === 'undefined' || typeof month === 'undefined') {
        // 인자가 없는 경우 현재 시점의 날짜로 설정
        year = currentDate.getFullYear();
        month = currentDate.getMonth() + 1;
      }

      if (year <= 0) {
        throw new Error('년도(year) 값을 확인해주세요');
      }

      if (month !== 0 && month < 1 || month > 12) {
        throw new Error('월(month)은 1~12 범위로 지정해주세요');
      } // 요청을 위한 파라미터 및 URL


      var schulCrseScCode = this._data.EDUTYPE[this._schoolType].toString();

      var schulKndScCode = '0' + schulCrseScCode; // 학사일정 데이터 요청

      return this._requestManager.post(this._calendarUrl, {
        ay: _util["default"].paddingNumber(year),
        mm: _util["default"].paddingNumber(month, 2),
        schulCode: this._schoolCode,
        schulKndScCode: schulKndScCode,
        schulCrseScCode: schulCrseScCode
      }).then(function (_ref3) {
        var data = _ref3.data;

        // 응답 값 확인
        if (data.result.status === 'error') {
          throw new Error(data.result.message);
        }
        /**
         * 학사일정 데이터를 정제하여 반환합니다.
         * @param {string} ev 학사일정 값
         */


        function parseCalendar(ev, sep) {
          if (ev) {
            var _res = ''; // 하루에 2개 이상의 일정이 있는 경우 | 로 구분되어있음

            ev.split('|').forEach(function (e) {
              // : 문자로 학사일정에 날짜,일정 등이 구분되어있으며 뒤에서 두 번째 값이 학사일정 값
              var eventSplited = e.split(':');
              _res += eventSplited[eventSplited.length - 2] + sep;
            }); // 맨 뒤의 구분자 삭제

            return _res.slice(0, _res.length - sep.length);
          } else {
            return null;
          }
        } // 데이터를 순회하며 값을 정제합니다.


        var calendarData = [];
        data.resultSVO.selectMonth.forEach(function (calendar) {
          // day1, event1 과 같은 형식의 프로퍼티에 날짜와 학사일정 데이터가 존재함
          for (var i = 1; i <= 7; i++) {
            var date = parseInt(calendar['day' + i]).toString();
            var event = parseCalendar(calendar['event' + i], option.separator || ',');
            calendarData.push({
              date: date,
              event: event
            });
          }
        }); // 수집한 데이터에서 빈 데이터 및 확인된 데이터만 필더링하여 객체에 저장

        var res = {};
        calendarData.forEach(function (calendar) {
          if (calendar && calendar.date && calendar.date !== 'NaN') {
            // 확인된 데이터만 추가
            res[calendar.date] = calendar.event || option["default"] || '';
          }
        }); // 년도, 월, 오늘 날짜, 오늘의 학사일정 값을 상황에 맞게 추가합니다.

        res.year = year;
        res.month = month;
        res.day = currentDate.getMonth() + 1 === month ? currentDate.getDate() : 0;
        res.today = year === currentDate.getFullYear() && month === currentDate.getMonth() + 1 ? res[res.day] || '' : '';
        return res;
      });
    }
  }]);

  return School;
}();

School.Type = type;
School.Region = region;
var _default = School;
exports["default"] = _default;