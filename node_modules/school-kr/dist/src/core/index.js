"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _data = _interopRequireDefault(require("../data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var data = _data["default"].data;

var RequestManager =
/*#__PURE__*/
function () {
  function RequestManager() {
    _classCallCheck(this, RequestManager);

    // 교육청 교육청 관할 지역
    this._region = null; // 데이터

    this._data = data; // 세션 ID

    this._sid = null; // 세션 만료 시간

    this._expires = null; // 세션 갱신 시간

    this._expiresTime = 1000 * 60 * 30; // 세션 업데이트 필요 여부 플래그

    this._needUpdate = true;
  }
  /**
   * 교육청 관할 지역 심볼 설정
   * @param {Symbol} region 교육청 관할 지역 심볼
   */


  _createClass(RequestManager, [{
    key: "setRegion",
    value: function setRegion(region) {
      this._region = region;
      this._needUpdate = true;
    }
    /**
     * HTTP GET 요청
     * @param {string} url 요청 URL
     * @param {any} config 요청 설정 객체
     * @returns {Promise<any>}
     */

  }, {
    key: "get",
    value: function get(url, config) {
      var _this = this;

      return this._prepare().then(function () {
        return _axios["default"].get(_this._makeUrl(url), _objectSpread({
          withCredentials: true
        }, config));
      });
    }
    /**
     * HTTP POST 요청
     * @param {string} url 요청 URL
     * @param {any} config 요청 설정 객체
     * @returns {Promise<any>}
     */

  }, {
    key: "post",
    value: function post(url, config) {
      var _this2 = this;

      return this._prepare().then(function () {
        return _axios["default"].post(_this2._makeUrl(url), _objectSpread({
          withCredentials: true
        }, config));
      });
    }
    /**
     * 해당 지역 교육청의 요청 URL를 생성하여 반환합니다.
     * @param {string} endPoint 데이터 수집 End-Point
     */

  }, {
    key: "_makeUrl",
    value: function _makeUrl(endPoint) {
      var host = this._data.REGION[this._region];
      return "https://".concat(host, "/").concat(endPoint);
    }
    /**
     * 요청 전 세션 확인 진행
     * @returns {Promise<void>}
     */

  }, {
    key: "_prepare",
    value: function _prepare() {
      var _this3 = this;

      return new Promise(function (resolve) {
        if (_this3._needUpdate || !_this3._sid || _this3._expires < +new Date()) {
          // 세션 ID가 존재하지 않거나 만료된 경우 새로 갱신
          _this3._reload().then(function () {
            _this3._needUpdate = false;
            _axios["default"].defaults.headers.common = {
              Cookie: 'JSESSIONID=' + _this3._sid
            };
            resolve();
          });
        } else {
          resolve();
        }
      });
    }
    /**
     * 새로운 세션으로 갱신
     * @returns {Promise<void>}
     */

  }, {
    key: "_reload",
    value: function _reload() {
      var _this4 = this;

      // 메인 페이지로 접속하여 세션 갱신
      return _axios["default"].get(this._makeUrl(this._data.mainUrl)).then(function (res) {
        // 쿠키에서 세션 ID 추출
        var cookie = res.headers['set-cookie'];

        if (!(cookie && Array.isArray(cookie))) {
          return;
        }

        var sid = cookie.join('').match(/JSESSIONID=(.*?);/);

        if (sid) {
          _this4._sid = sid[1];
        }

        _this4._expires = Date.now() + _this4._expiresTime;
      });
    }
  }]);

  return RequestManager;
}();

var _default = {
  RequestManager: RequestManager
};
exports["default"] = _default;